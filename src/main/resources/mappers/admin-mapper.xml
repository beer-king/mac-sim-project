<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="adminMapper">
	<resultMap id="beerResultSet" type="Beers">
		<result column="beer_no" property="beerNo"/>
		<result column="beer_name" property="beerName"/>
		<result column="beer_ename" property="beerEname"/>
		<result column="beer_style" property="beerStyle"/>
		<result column="beer_producer" property="beerProducer"/>
		<result column="beer_location" property="beerLocation"/>
		<result column="beer_alcohol" property="alcohol"/>
		<result column="beer_container" property="beerContainer"/>
		<result column="updated_date" property="updatedDate"/>
		<result column="status" property="status"/>
		<result column="reply_count" property="replyCount"/>
		<result column="score_total" property="scoreTotal"/>
		<result column="origin_name" property="originName"/>
		<result column="change_name" property="changeName"/>
	</resultMap>
    <resultMap id="memberResultSet" type="Member">
        <result column="user_no" property="userNo"/>
        <result column="user_id" property="userId"/>
        <result column="user_pwd" property="userPwd"/>
        <result column="user_name" property="userName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="address" property="address"/>
        <result column="extra_address" property="extraAddress"/>
        <result column="detail_address" property="detailAddress"/>
        <result column="post_code" property="postCode"/>
        <result column="birth" property="birth"/>
        <result column="phone" property="phone"/>
        <result column="point" property="point"/>
        <result column="status" property="status"/>
        <result column="login_time" property="loginTime"/>
        <result column="report" property="report"/>
    </resultMap>
    <resultMap type="Report" id="reportResultSet">
    	<result column="req_no" property="reqNo"/>
    	<result column="rfrom_no" property="rfromNo"/>
    	<result column="req_content" property="reqContent"/>
    	<result column="req_status" property="reqStatus"/>
    	<result column="req_num" property="reqNum"/>
    	<result column="req_cate_no" property="reqCateNo"/>
    	<result column="req_cate_title" property="reqCateTitle"/>
    </resultMap>
    <resultMap type="Notice" id="noticeResultSet">
		<result column="notice_no" property="noticeNo"/>
		<result column="user_no" property="userNo"/>
		<result column="user_id" property="userId"/>
		<result column="notice_title" property="noticeTitle"/>
		<result column="notice_content" property="noticeContent"/>
		<result column="notice_date" property="noticeDate"/>
		<result column="count" property="count"/>
	</resultMap>
	<resultMap id="eventResultSet" type="Event">
		<result column="ev_no" property="evNo"/>
		<result column="user_id" property="userNo"/>
		<result column="ev_title" property="evTitle"/>
		<result column="ev_content" property="evContent"/>
		<result column="ev_starttime" property="evStartTime"/>
		<result column="ev_endtime" property="evEndTime"/>
		<result column="beer_no" property="beerNo"/>
		<result column="beer_name" property="beerNo"/>
		<result column="req_time" property="reqTime"/>
		<result column="limit_no" property="limitNo"/>
		<result column="apply_no" property="applyNo"/>
		<result column="ev_point" property="evPoint"/>
		<result column="click_no" property="clickNo"/>
		<result column="status" property="status"/>
		<result column="ev_date" property="evDate"/>
		<result column="ev_thumb" property="evThumb"/>
		<result column="ev_deny" property="evDeny"/>		
	</resultMap>
	<resultMap type="GBR" id="GBRresultSet">
		<result column="request_no" property="requestNo"/>
		<result column="pno" property="pNo"/>
		<result column="user_id" property="userId"/>
		<result column="req_status" property="reqStatus"/>
		<result column="address" property="address"/>
		<result column="pname" property="pname"/>
		<result column="gb_thumb" property="thumb"/>
		<result column="gb_point" property="gbPoint"/>
	</resultMap>
	<resultMap id="groupBuyResultSet" type="GroupBuy">
		<result column="pno" property="pno"/>
		<result column="user_id" property="userNo"/>
		<result column="pname" property="gbName"/>
		<result column="price" property="price"/>
		<result column="content" property="content"/>
		<result column="gb_start" property="gbStart"/>
		<result column="gb_end" property="gbEnd"/>
		<result column="gb_point" property="gbPoint"/>
		<result column="gb_thumb" property="gbThumb"/>
		<result column="status" property="status"/>
		<result column="limit_no" property="limitNo"/>
		<result column="apply_no" property="applyNo"/>
		<result column="click_no" property="clickNo"/>	
		<result column="gb_date" property="gbDate"/>		
	</resultMap>
	<resultMap id="AttachmentResultSet" type="Attachment">
		<result column="att_no" property="attNo"/>
		<result column="origin_name" property="originName"/>
		<result column="change_name" property="changeName"/>
		<result column="ev_no" property="evNo"/>
		<result column="pno" property="pNo"/>
	</resultMap>
  	<insert id="insertBeer" parameterType="Beers">
  		insert
  			into beer
  			(
  				  beer_no
  				, beer_name
  				, beer_ename
  				, beer_style
  				, beer_producer
  				, beer_location
  				, beer_alcohol
  				, beer_container
  				, origin_name
  				, change_name
  			)
  			values
  			(
  				  seq_beer_no.nextval
  				, #{beerName}
  				, #{beerEname}
  				, #{beerStyle}
  				, #{beerProducer}
  				, #{beerLocation}
  				, #{alcohol}
  				, #{beerContainer}
  				, #{originName}
  				, #{changeName}
  			)
  	</insert>
  	<update id="updateBeer" parameterType="Beers">
  		update
  			beer
  		 set
  			   beer_name = #{beerName}
  			 , beer_ename = #{beerEname}
  			 , beer_style = #{beerStyle}
  			 , beer_producer = #{beerProducer}
  			 , beer_location = #{beerLocation}
  			 , beer_alcohol = #{alcohol}
  			 , beer_container = #{beerContainer}
  			 , origin_name = #{originName}
  			 , change_name = #{changeName}
  			 , updated_date = sysdate
  		 where
  		 	beer_no = #{beerNo}
  	</update>
  	<update id="updatePoint" parameterType="Member">
  		update
  			member
  		 set
  		 	point = point + #{point}
  		where
  		 	user_id = #{userId}
  	</update>
  	<insert id="insertNotice" parameterType="Notice">
  		insert
  			into notice
  			(
  				  notice_no
  				, user_no
  				, notice_title
  				, notice_content
  			)
  			values
  			(
  				  seq_notice_no.nextval
  				, #{userNo}
  				, #{noticeTitle}
  				, #{noticeContent}
  			)
  	</insert>
  	
  	<update id="updateNotice" parameterType="Notice">
  		update
  			notice
  		 set
  		 	  notice_title = #{noticeTitle}
  		 	, notice_content = #{noticeContent}
  		 	, notice_date = sysdate
  		 where
  		 	notice_no = #{noticeNo}
  	</update>
  	
  	<update id="deleteNotice" parameterType="string">
  		update
  			notice
  		 set
  			status = 'N'
  		where
  			notice_no = #{noticeNo}
  	</update>
  	
  	<select id="selectUserListCount" parameterType="_int" resultType="_int">
		select count(*)
		from member
		where report > 4 and status = #{status}
  	</select>
  	
  	<select id="selectUserList" parameterType="_int" resultMap="memberResultSet">
		select user_no, user_id, report, status
		from member
		where report > 4 and status = #{status}
        order by user_no asc
  	</select>
  	
  	<select id="selectCallListCount" resultType="_int" parameterType="SD">
		select count(*)
		from report
		where req_status = #{status} and
			<foreach item="item" index="index" collection="data" open="(" separator="or" close=")">
			rfrom_no = #{item}
			</foreach>
  	</select>
  	
  	<select id="selectCallList" resultMap="reportResultSet" parameterType="SD">
		select req_no, rfrom_no, req_content, req_status, req_num, req_cate_no, req_cate_title
		from report
		where req_status = #{status} and
			<foreach item="item" index="index" collection="data" open="(" separator="or" close=")">
			rfrom_no = #{item}
			</foreach>
		order by req_no desc
  	</select>
  	
  	<update id="userBan" parameterType="string">
  		update
  			member
  		   set
  		   	status = 1
  		 where
  		 	user_no = #{userNo}
  	</update>
  	
  	<update id="reportBC" parameterType="SD">
  		update
  			report
  		   set
  		   	req_status = #{status}
  		 where
  		 	req_no = #{category}
  	</update>
  	
  	
  	<select id="selectBeerListCount" resultType="_int" parameterType="BS">
  		select count(*)
  		from beer
  		<choose>
  			<when test="category == 'name'">
  				where status = 'Y' and beer_name like '%'|| #{content} ||'%'
  			</when>
  			<when test="category == 'no'">
  				where status = 'Y' and beer_no = #{content} 
  			</when>
  			<otherwise>
  				where status = 'Y'
  			</otherwise>
  		</choose>
  	</select>
  	
  	<select id="selectBeerList" resultMap="beerResultSet" parameterType="BS">
		select beer_no, beer_name, beer_ename, beer_style, beer_producer, beer_location, beer_alcohol, beer_container, updated_date, status, reply_count, score_total, origin_name, change_name
		from beer
		<choose>
  			<when test="category == 'name'">
  				where status = 'Y' and beer_name like '%'|| #{content} ||'%'
  			</when>
  			<when test="category == 'no'">
  				where status = 'Y' and beer_no = #{content} 
  			</when>
  			<otherwise>
  				where status = 'Y'
  			</otherwise>
  		</choose>
		order by beer_no asc
  	</select>
  	
  	<select id="selectListCount" resultType="_int" parameterType="BS">
		select
		       count(*)
		  from notice
		 <choose>
		 	<when test="category == 'title'">
		 		where status = 'Y' and notice_title like '%'|| #{content} ||'%'
		 	</when>
		 	<when test="category == 'content'">
		 		where status = 'Y' and notice_content like '%'|| #{content} ||'%'
		 	</when>
		 	<otherwise>
		 		where status = 'Y'
		 	</otherwise>
		 </choose>
		 
	</select>
	
	<select id="selectNoticeList" resultMap="noticeResultSet" parameterType="BS">
		select
		       notice_no
		     , user_id
		     , notice_title
		     , notice_date
		     , count
		  from notice
		  join member using(user_no)
          <choose>
		 	<when test="category == 'title'">
		 		where notice.status = 'Y' and notice_title like '%'|| #{content} ||'%'
		 	</when>
		 	<when test="category == 'content'">
		 		where notice.status = 'Y' and notice_content like '%'|| #{content} ||'%'
		 	</when>
		 	<otherwise>
		 		where notice.status = 'Y'
		 	</otherwise>
		 </choose>
		 order
		    by notice_no desc			
	</select>
	 
	<select id="selectNotice" resultMap="noticeResultSet" parameterType="string">
		select
		       notice_no
		     , user_id
		     , notice_title
             , notice_content
		     , notice_date
		     , count
		  from notice
		  join member using(user_no)
          where
            notice.status = 'Y' and notice_no = #{noticeNo}
	</select>
	
	<select id="selectEventListCount" resultType="_int" parameterType="BS">
  		select count(*)
  		from event
  		<choose>
  			<when test="content != null">
  				where status = #{category} and ev_title like '%'|| #{content} ||'%'
  			</when>
  			<otherwise>
  				where status = #{category}
  			</otherwise>
  		</choose>
  	</select>
  	
  	<select id="selectEventList" resultMap="eventResultSet" parameterType="BS">
		select ev_no, user_id, ev_title, ev_content, ev_starttime, ev_endtime, beer_no, req_time, limit_no, apply_no, ev_point, click_no, event.status, ev_date, ev_thumb, ev_deny
		from event
		join member using(user_no)
  		<choose>
  			<when test="category != null">
  				where event.status = #{category} and ev_title like '%'|| #{content} ||'%'
  			</when>
  			<otherwise>
  				where event.status = #{category}
  			</otherwise>
  		</choose>
		order by ev_date asc
  	</select>
  	
  	<update id="updateBatchEvent" parameterType="Batch">
		update
		    event
		set
		<choose>
			<when test="content !=null">
				status = 'C',
				ev_deny = #{content}
			</when>
			<otherwise>
				status = #{status} 
			</otherwise>
		</choose>
		where
			<foreach item="item" index="index" collection="list" separator="or">
				ev_no = #{item}
			</foreach>
  	</update>
  	
  	<select id="selectEventOne" parameterType="string" resultMap="eventResultSet">
		select ev_no, user_id, ev_title, ev_content, ev_starttime, ev_endtime, beer_no, req_time, limit_no, apply_no, ev_point, click_no, event.status, ev_date, ev_thumb, ev_deny
		from event
		join member using(user_no)
		where ev_no = #{evNo}
  	</select>
  	
  	<select id="selectBeerOne" parameterType="string" resultMap="beerResultSet">
		select beer_no, beer_name, beer_ename, beer_style, beer_producer, beer_location, beer_alcohol, beer_container, origin_name, change_name
		from beer
		where status = 'Y' and beer_no = #{beerNo}
  	</select>
  	
  	<update id="updateBatchReport" parameterType="Batch">
  		update
		    report
		set
			req_status = #{status} 
		where
			<foreach item="item" index="index" collection="list" separator="or">
				req_no = #{item}
			</foreach>
  	</update>
  	
  	<select id="selectPnocurrent" resultType="_int">
		select pno
		from group_buy
		where pno = (SELECT last_number 
		FROM user_sequences
		WHERE sequence_name = 'SEQ_PNO') - 1
  	</select>
  	
  	<insert id="insertAttachment" parameterType="Attachment">
  		insert
  			into attachment
  			(
  				    att_no
  				  , origin_name
  				  , change_name
  				  , pno
  			)
  			values
  			(
  				  seq_att_no.nextval
  				, #{originName}
  				, #{changeName}
  				, SEQ_PNO.CURRVAL
  			)
  	</insert>
  	
  	<insert id="updateAttachment" parameterType="Attachment">
  		insert
  			into attachment
  			(
  				    att_no
  				  , origin_name
  				  , change_name
  				  , pno
  			)
  			values
  			(
  				  seq_att_no.nextval
  				, #{originName}
  				, #{changeName}
  				, #{pNo}
  			)
  	</insert>
  	<insert id="insertGB" parameterType="GroupBuy">
  		insert
  			into group_buy
  			(
  				  pno
  				, user_no
  				, pname
  				, price
  				, content
  				, gb_start
  				, gb_end
  				, gb_point
  				, gb_thumb
  				, limit_no
  			)
  			values
  			(
  				  seq_pno.nextval
  				, #{userNo}
  				, #{gbName}
  				, #{price}
  				, #{content}
  				, #{gbStart}
  				, #{gbEnd}
  				, #{gbPoint}
  				, #{gbThumb}
  				, #{limitNo}
  			)
  			
  	</insert>
  	<update id="updateGB" parameterType="GroupBuy">
  		update 
  			group_buy
  		   set
  		   	  user_no = #{userNo}
  			, pname = #{gbName}
  			, price = #{price}
  			, content = #{content}
  			, gb_start = #{gbStart}
  			, gb_end = #{gbEnd}
  			, gb_point = #{gbPoint}
  			, gb_thumb = #{gbThumb}
  			, limit_no = #{limitNo}
  		 where
  		 	pno = #{pno}
  	</update>
  	<select id="selectGBRlistCount" resultType="_int" parameterType="BS">
		select count(*)
		from gb_request
		join group_buy using(pno)
		<choose>
			<when test="content != null">
				where req_status = #{category} and pname like '%' || #{content} || '%'
			</when>
			<otherwise>
				where req_status = #{category}
			</otherwise>
		</choose>
  	</select>
  	
  	<select id="selectGBRlist" resultMap="GBRresultSet" parameterType="BS">
		select request_no, pno, user_id, req_status, g.address, pname, gb_thumb, g.gb_point
		from gb_request g
		join member using(user_no)
		join group_buy using(pno)
		<choose>
			<when test="content != null">
				where req_status = #{category} and pname like '%' || #{content} || '%'
			</when>
			<otherwise>
				where req_status = #{category}
			</otherwise>
		</choose>
		order by request_no desc
  	</select>
  	
  	<update id="updateBatchGB" parameterType="Batch">
  		update
		    gb_request
		set
			req_status = #{status} 
		where
			<foreach item="item" index="index" collection="list" separator="or">
				request_no = #{item}
			</foreach>
  	</update>
  	
  	<update id="returnPoint" parameterType="string">
		update member
		set
		point = (select point + g.gb_point
		                       from gb_request g
		                       join member using(user_no)
		                       join group_buy using(pno)
		                       where request_no = #{no}
		                    )
		where user_id = (select user_id
		                       from gb_request g
		                       join member using(user_no)
		                       join group_buy using(pno)
		                       where request_no = #{no}
		                    )
  	</update>
  	
  	<select id="selectGBlistCount" resultType="_int" parameterType="BS">
		select count(*)
		from group_buy
		<choose>
			<when test="content != null">
				where status = #{category} and pname like '%' || #{content} || '%'
			</when>
			<otherwise>
				where status = #{category}
			</otherwise>
		</choose>
  	</select>
  	<select id="selectGBlist" resultMap="groupBuyResultSet" parameterType="BS">
		select pno, pname, gb_end, gb_thumb
		from group_buy
		<choose>
			<when test="content != null">
				where status = #{category} and pname like '%' || #{content} || '%'
			</when>
			<otherwise>
				where status = #{category}
			</otherwise>
		</choose>
		order by gb_end asc
  	</select>
  
  	<select id="selectGBOne" resultType="GroupBuy" parameterType="string">
		select pno, pname gbname, price, content, gb_start gbStart, gb_end gbEnd, gb_point gbPoint, gb_thumb gbThumb, limit_no limitNo
		from group_buy
		where status = 'Y' and pno = #{pNo}
  	</select>
  	
  	<select id="selectATOne" resultMap="AttachmentResultSet" parameterType="string">
		select att_no, origin_name, change_name, pno
		from attachment
		where pno = #{pNo}
		order by att_no asc
  	</select>
  	
  	<update id="deleteGroupBuy" parameterType="string">
		update group_buy
		set status = 'N'
		where pno = #{pNo}
  	</update>
  	
  	<delete id="deleteAttach" parameterType="string">
		delete from attachment
		where pno = #{pNo}
  	</delete>
  	
  	
</mapper>