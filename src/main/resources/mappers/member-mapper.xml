<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="memberMapper">
    <resultMap id="memberResultSet" type="Member">
        <result column="user_no" property="userNo"/>
        <result column="user_id" property="userId"/>
        <result column="user_pwd" property="userPwd"/>
        <result column="user_name" property="userName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="address" property="address"/>
        <result column="extra_address" property="extraAddress"/>
        <result column="detail_address" property="detailAddress"/>
        <result column="post_code" property="postCode"/>
        <result column="birth" property="birth"/>
        <result column="phone" property="phone"/>
        <result column="point" property="point"/>
        <result column="status" property="status"/>
        <result column="login_time" property="loginTime"/>
        <result column="report" property="report"/>
    </resultMap>
	
	<resultMap type="PointHistory" id="pointHistoryResultSet">
		<result column="ph_no" property="pointNo"/>
		<result column="pdate" property="pointDate"/>
		<result column="point" property="point"/>
		<result column="user_no" property="userNo"/>
		<result column="category" property="category"/>
		<result column="point_history" property="pointHistory"/>
	</resultMap>
	

	<!-- 
		<resultMap id="beerReviewResultSet" type="Score">
			<result column="score_no" property="scoreNo"></result>
			<result column="beer_name" property="beerName"></result>
			<result column="score" property="score"></result>
			<result column="updated_date" property="updatedDate"></result>
			<result column="comments" property="comments"></result>
		</resultMap>
	 -->

   <resultMap type="Event" id="eventResultSet">
   		<result column="ev_no" property="evNo"></result>
   		<result column="user_no" property="userNo"/>
   		<result column="ev_title" property="evTitle"/>
   		<result column="ev_content" property="evContent"/>
   		<result column="status" property="status"/>
   </resultMap>

	<resultMap id="historyResultSet" type="PointHistory">
		<result column="PH_NO" property="pointNo"></result>
		<result column="PDATE" property="pointDate"></result>
		<result column="POINT" property="point"></result>
		<result column="USER_NO" property="userNo"></result>
		<result column="CATEGORY" property="category"></result>
		<result column="POINT_HISTORY" property="pointHistory"></result>
	</resultMap>

	<resultMap id="groupResultSet" type="GroupBuy">
		<result column="pno" property="pNo"></result>
		<result column="user_no" property="userNo"></result>
		<result column="pname" property="gbName"></result>
		<result column="gb_point" property="gbPoint"></result>
	</resultMap>

   <update id="updateMember" parameterType="Member">
       update
              member
         set  user_name = #{userName}
            , gender = #{gender}
            , phone = #{phone}
            , email = #{email}
            , address = #{address}
       where  user_id = #{userId}
   </update>

	

	<update id="memberPwdUpdate" parameterType="Member">
		update
               member
          set user_pwd = #{newPwd}
       where  user_id =#{userId}
         
	</update>


   <update id="deleteMember" parameterType="string">
       update
             member
         set status = 2
      	where user_id = #{userId}   
   </update>
	
	<insert id="insertMember" parameterType="Member">
		insert
		  into member
		  (
		  	 user_no
		   , user_id
		   , user_pwd
		   , user_name
		   , gender
		   , email
		   , address
		   , extra_address
		   , detail_address
		   , post_code
		   , birth
		   , phone
		  )
		  values
		  (
		    seq_user_no.nextval
		  , #{userId}
		  , #{userPwd}
		  , #{userName}
		  , #{gender}
		  , #{email}
		  , #{address}
		  , #{extraAddress}
		  , #{detailAddress}
		  , #{postCode}
		  , #{birth}
		  , #{phone}
		  )
	</insert>

	<select id="findId" resultMap="memberResultSet"
			parameterType="string">
	  select user_id
	    from member
	   where user_name = #{userName}
	    and phone= #{phone}		
	</select>

	<select id="idCheck" parameterType="string" 
			resultType="_int">
		select
		       count(*)
		  from member
		 where user_id=#{userId}
	</select>


	<select id="loginMember" resultMap="memberResultSet"
			parameterType="Member">
		select
			   user_no
		     , user_id
		     , user_pwd
		     , user_name
		     , gender
		     , email
		     , address
		     , extra_address
		     , detail_address
		     , post_code
		     , birth
		     , phone
		     , point
		     , status
		     , login_time
		     , report
		 from member
		where user_id = #{userId}
		   and (status = 0 or status = 3)
	</select>
	


	<!--

		<select id="selectBeerReviewList" resultMap="beerReviewResultSet">
	
			select
			       score_no
				  ,beer_name
				  ,score
				  ,s.updated_date
				  ,comments
			from score s
					 join beer b using(beer_no)
			where s.status='Y';
	
		</select>
	 -->
		<update id="updateBeerReview" parameterType="_int">
	
			update
	              score
	         set status = 'N'
	       where score_no = #{scoreNo}
	
	
		</update>
    
	
	
	
	<select id="selectEventList" resultMap="eventResultSet" parameterType="Member">
		  select 
				 ev_title
			    ,ev_no
			    ,ev_content
			    ,status
		   from event e
		   join event_attendee ea using(ev_no)
		   where ea.user_no = #{userNo}
			 and EVENT_ENTRY_STATUS = 'Y'
		   order by ev_no desc
	</select>
	
	
	<select id="reviewCount" resultType="_int" parameterType="Member">
		
		   select count(*) 
		         from score 
		         where user_no =#{userNo}
	
	</select>
	
	<select id="eventCount" resultType="_int" parameterType="Member">
		
		   select count(*) 
		         from event_attendee 
		         where user_no =#{userNo}
		           and EVENT_ENTRY_STATUS = 'Y'
	
	</select>
	
	<select id="groupCount" resultType="_int" parameterType="Member">
		
		   select count(*) 
		         from gb_request
		         where user_no =#{userNo}
	
	</select>
	
	
	<update id="deleteEvent" parameterType="Member">
		 update
		         event_attendee
		     set event_entry_status='N'
		   where user_no =#{userNo}
		     and ev_no=#{evNo}
	
	</update>
	
	<select id="loginPoint" parameterType="_int" 
		    resultType="string">
		select
		       to_char(sysdate, 'yyyymmdd') - to_char(login_time, 'yyyymmdd')
		  from member
		 where user_no = #{ userNo }
	</select>
	
	<update id="memberPointUpdate" parameterType="hashmap">
		 UPDATE MEMBER
		    SET
		       POINT = POINT + #{point},
		       login_time = sysdate
		    WHERE
		        user_no =  #{userNo}
	</update>
	
	<insert id="pointHistory" parameterType="hashmap">
		 insert
		   into point_history
		   (  
		      ph_no
		    , user_no
		    , point
		    , category
		    , point_history 
		   )
		   values
		   (
		      seq_ph_no.nextval
		    , to_Number(#{userNo})
		    , to_Number(#{point})
		    , #{cate}
		    , #{pointHistory}
  		   )
	</insert>
	
	<!--  
	<update id="updatePw" parameterType="Member">
		update member 
	       set userPwd = ?
	     where userId = ?     

	</update>-->
	
	

	<select id="selectPointHistory" resultMap="historyResultSet" parameterType="Member">
		select
		      ph_no
		     ,pdate
		     ,point
		     ,user_no
		     ,category
			 ,point_history
		   from point_history
		   where user_no=#{userNo}
		   order by pdate desc
	</select>


	<select id="selectGroupBuyList" resultMap="groupResultSet" parameterType="Member">
		select
			  pno
			 ,gr.user_no
			 ,pname
			 ,gb_point
			 ,request_no
			 ,req_status
		from group_buy gb
				 join gb_request gr using(pno)
		where gr.user_no=#{userNo}
	</select>

	<update id="deleteGroupBuy" parameterType="Member">
        update
            gb_request
        set req_status = 'F'
        where user_no = #{userNo}
          and pno = #{pNo}
	</update>



</mapper>














